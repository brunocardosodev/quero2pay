@model Quero2pay.Models.Empresa

<script src="~/Scripts/jquery-3.3.1.min.js"></script>

<div class="container-fluid header-page-fluid">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h1>Cadastro</h1>
                <p>Formulário de cadastro de empresa</p>
            </div>
        </div>
    </div>
</div> 

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="container">
    <div class="row">
        <div class="col-md-12 mg-botton">
            <a href='javascript:history.go(-1)' class="btn btn-link btn-tabela"><span class="glyphicon glyphicon-menu-left"></span> Voltar</a>
        </div>
        <div class="col-md-12">
            <form>
                <div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                </div>

                <div class="form-group row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.nmEmpresa, htmlAttributes: new { @class = "control-label col-md-2" })
                    
                        @Html.EditorFor(model => model.nmEmpresa, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.nmEmpresa, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.cep, htmlAttributes: new { @class = "control-label col-md-2" })
                    
                        @Html.EditorFor(model => model.cep, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.cep, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        @Html.LabelFor(model => model.rua, htmlAttributes: new { @class = "control-label col-md-2" })
            
                        @Html.EditorFor(model => model.rua, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.rua, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-2">
                        @Html.LabelFor(model => model.numero, htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(model => model.numero, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.numero, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.bairro, htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(model => model.bairro, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.bairro, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.cidade, htmlAttributes: new { @class = "control-label col-md-2" })
                    
                        @Html.EditorFor(model => model.cidade, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.cidade, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
                        
                        @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.complemento, htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(model => model.complemento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.complemento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.ddd, htmlAttributes: new { @class = "control-label col-md-2" })
                    
                        @Html.EditorFor(model => model.ddd, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ddd, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.nuTelefone, htmlAttributes: new { @class = "control-label col-md-2" })
                    
                        @Html.EditorFor(model => model.nuTelefone, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.nuTelefone, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary"><span class="glyphicon glyphicon-floppy-disk"></span> Salvar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
}

<!-- Adicionando Javascript -->
<script>
    $(document).ready(function () {

        function limpa_formulário_cep() {
            // Limpa valores do formulário de cep.
            $("#rua").val("");
            $("#bairro").val("");
            $("#cidade").val("");
            $("#estado").val("");
        }

        //Quando o campo cep perde o foco.
        $("#cep").blur(function () {

            //Nova variável "cep" somente com dígitos.
            var cep = $(this).val().replace(/\D/g, '');

            //Verifica se campo cep possui valor informado.
            if (cep != "") {

                //Expressão regular para validar o CEP.
                var validacep = /^[0-9]{8}$/;

                //Valida o formato do CEP.
                if (validacep.test(cep)) {

                    //Preenche os campos com "..." enquanto consulta webservice.
                    $("#rua").val("...");
                    $("#bairro").val("...");
                    $("#cidade").val("...");
                    $("#estado").val("...");

                    //Consulta o webservice viacep.com.br/
                    $.getJSON("https://viacep.com.br/ws/" + cep + "/json/?callback=?", function (dados) {

                        if (!("erro" in dados)) {
                            //Atualiza os campos com os valores da consulta.
                            $("#rua").val(dados.logradouro);
                            $("#bairro").val(dados.bairro);
                            $("#cidade").val(dados.localidade);
                            $("#estado").val(dados.uf);
                        } //end if.
                        else {
                            //CEP pesquisado não foi encontrado.
                            limpa_formulário_cep();
                            alert("CEP não encontrado.");
                        }
                    });
                } //end if.
                else {
                    //cep é inválido.
                    limpa_formulário_cep();
                    alert("Formato de CEP inválido.");
                }
            } //end if.
            else {
                //cep sem valor, limpa formulário.
                limpa_formulário_cep();
            }
        });
    });

</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
